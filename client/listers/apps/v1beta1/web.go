// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/ysicing/cloudflow-api/apps/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WebLister helps list Webs.
// All objects returned here must be treated as read-only.
type WebLister interface {
	// List lists all Webs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Web, err error)
	// Webs returns an object that can list and get Webs.
	Webs(namespace string) WebNamespaceLister
	WebListerExpansion
}

// webLister implements the WebLister interface.
type webLister struct {
	indexer cache.Indexer
}

// NewWebLister returns a new WebLister.
func NewWebLister(indexer cache.Indexer) WebLister {
	return &webLister{indexer: indexer}
}

// List lists all Webs in the indexer.
func (s *webLister) List(selector labels.Selector) (ret []*v1beta1.Web, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Web))
	})
	return ret, err
}

// Webs returns an object that can list and get Webs.
func (s *webLister) Webs(namespace string) WebNamespaceLister {
	return webNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WebNamespaceLister helps list and get Webs.
// All objects returned here must be treated as read-only.
type WebNamespaceLister interface {
	// List lists all Webs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Web, err error)
	// Get retrieves the Web from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Web, error)
	WebNamespaceListerExpansion
}

// webNamespaceLister implements the WebNamespaceLister
// interface.
type webNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Webs in the indexer for a given namespace.
func (s webNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Web, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Web))
	})
	return ret, err
}

// Get retrieves the Web from the indexer for a given namespace and name.
func (s webNamespaceLister) Get(name string) (*v1beta1.Web, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("web"), name)
	}
	return obj.(*v1beta1.Web), nil
}
